#Conditional statement,Function, Lambda Expression

#Conditional statement
#Iterables
-iterables can be said as collection of items. eg: list, dict,tuple,set,string.
#iterate
-they can be iterated that means we can go one by one items in it. this process is called iteration.
    
#while loop
#eg_1
n = 5
while n > 0:
    print(n)
    n -= 1
    
#Looping through list
#eg_2
a = ['hello','world','hi']
while a:
    print(a.pop()) #last bata pop    
    
 #break/continue
#eg_3
a = 5
while a > 0:
    a -= 1
    if a == 2:
        continue #break
    print(a)   
    
#else clause
i = 1
while i < 6:
    print(i)
    i += 1
else:
    print("i is no longer less than 6.") 
    
#nested loops
a = [1,2,3]
while len(a):
    print(a.pop())
    b = [4,5,6]
    while len(b):
        print(b.pop())  
        
#one line while statement
n = 10
while n > 0: n-=1; print(n);print('printed')        
        
#For loop
westeros = ['winterfall','kingslanding','riverlande','iron island']
for kingdom in westeros:
    print(kingdom)
    
#for loop with dictionary
country_capital = {
    'Nepal' : 'Kathmandu',
    'India': 'New Delhi',
    'China' : 'Beijing'
}
for i in country_capital.keys():
    print("Keys : ",i)
for i in country_capital.values():
    print("Values : ",i)
for i in country_capital.items():
    print("Items : ",i)
    
#range with one arg
for i in range(10):
    print(i)    
    
#range with two arg
for i in range(0,5):
    print(i)   
    
#range with three arg
for i in range(0,10,2):
    print(i)    

#decrementing range
for i in range(10,-6,-2):
    print(i)

#enumerate()
#eg_1
country = ['Nepal','China','India']
print(list(enumerate(country,start=0)))    
    
#enumerate()
#eg_2
print(list(enumerate(country,start=10)))

#sorted()
#sorting various methods
a = [3,4,6,2,7,9,0,8]
print(sorted(a))
print(sorted(a, reverse = True))

#2D list
lis = [[1,2],[2,3],[4,1],[1,0]]
print(sorted(lis, key = lambda x: x[1])) #1 rakheko le list ko 2nd element bata sort vairaxa
print(sorted(lis, key = lambda x: x[0])) #0 rakheko le list ko 1st element bata sort vairaxa

#Function
def alert():
    return('Attention please.....')
print(alert())

#subtract func for non_negative result
def subtract(num1,num2):
    if num1 >= num2:
        return num1 - num2
    else:
        return num2 - num1
print(subtract(5,9))

def message(name,smiley):
    print(f"Hello my name is {name} and {smiley}")
message('jk','heheheh')

#Passing arg values

#Required arg
def add(num1, num2):
    return num1+num2
print(add(1,2))

#Keyword arg
def message(name,smiley):
    print(f"Hello my name is {name} and {smiley}")
message('jk','heheheh')

#default parameter values
def message(name = 'Will' , smiley = 'hahaha'):
    print(f"Hello my name is {name} and {smiley}")
message('jk','heheh')

#Var-length values(args,kwargs)
def func(*arg):
    return arg
func(1,2,3,4,5)

def func(*arg,**kwarg):
    print(kwarg)
    return sum(arg)
func(1,2,3,4,5,num1 = 5,num2 = 10) #num1 = 5 vaneko kwarg

#Rule : Actual params,arg,default,kwarg
#def func(name, args, i = 'Hi', *kwargs)
#Scope -start with local -check in parent -global -is a built-in function?

#Scope
a = 1
def parent():
    a = 2
    def local():
#        a = 3
        return a
    return local()
print(parent())
print(a)

#Lambda expression
#syntax : lamda var : expression
add = lambda x,y:x+y
print(add(2,3))

#Pure functions -> aafai vitra matra asar garxa bahira gardaina(global lai asar gardaina) -map() -filter() -zip()
#map()
-returns a map obj of the results after applying the given func to each item of given iterable.
-map(func,iterable)

#map()
my_list = [1,2,3]
def times_2(item):
    return item*2
print(map(times_2, my_list))
print(my_list)

#map() using lambda expression
print(list(map(lambda item:item*2,my_list)))

#filter -filter() func filters the given sequence with the help of func that test each element in the sequence to be true or not.
syntax : filter(func,iterable).

#filter()
my_list = [1,2,3,4,5,6,7,8,9]
def only_odd(item):
    return item % 2 != 0
print(list(filter(only_odd,my_list)))

#filter() using lambda expression
print(list(filter(lambda item:item%2 != 0, my_list)))

#zip -purpose of zip is to map the similar index of multiple containers so they can be used as single entity -zip(*iterables)
#zip()
a = [1,2,3,4]
b = [4,5,6,7]
print(list(zip(a,b))) #index join garne

#comprehensions -this is quite unique to python. makes program really nice. -there are: -list comprehension -set comprehension -dictionary comprehension -these are the data types we can use for comprehension.
#without comprehension
lis = []
for char in 'Hello':
    lis.append(char)
print(lis)

#using comprehension(list)
lis = [x for x in 'Hello']
print(lis)

#using comprehension(list)
lis1 = [x for x in range(0,20) if x%2 != 0]
print(lis1)

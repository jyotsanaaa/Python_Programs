#OOP

programming paradigm
house 1 :
house_num = .... 
color = ....
is_available = ....

house 2 :
house_num = .... 
color = .... 
is_available = ...

class Housing:  #camel case
    def buy_house(self): #self le object lai refer garxa
        print('The house number is ' + self.house_num)

#for H1    
H1 = Housing() #instantiate gareko 

#default constructor
H1.house_num = '101'
H1.color = 'blue'
H1.is_available = True      
 
H1.buy_house() #func call garda self ko tha ma H1 hunxa       

#for H2
H2 = Housing()

#default constructor
H2.house_num = '102'
H2.color = 'White'
H2.is_available = False

H2.buy_house()

class HousingDetails:
    #custom constructor
    #dunder methods
    def __init__(self,house_num,color,is_available):   #initialize constructor   #self le yo(house_num,color,.....) class ko ho vanera dekhauxa
        self.house_num = house_num
        self.color = color
        self.is_available = is_available
        
    def check_house(self):
        print('Your house is ' + self.house_num)
        print('Is available for sale : ' + self.is_available)
        print('Color : ' + self.color)
        
HD1 = HousingDetails('101','blue','True') #instantiation
HD1.check_house()

HD2 = HousingDetails('102','black','False')
HD2.check_house()
